//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""RTS"",
            ""id"": ""2222fb85-a5a8-47a8-97d3-bcf20950b3bc"",
            ""actions"": [
                {
                    ""name"": ""MainAction"",
                    ""type"": ""Button"",
                    ""id"": ""e93a4586-3b98-4059-933f-0d07257c3157"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""97be64c9-4675-487e-b437-02843ad63a14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnitSelection"",
                    ""type"": ""Button"",
                    ""id"": ""99204107-23e4-4721-bcbe-d607e8d496d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControlModifier"",
                    ""type"": ""Button"",
                    ""id"": ""73c12ace-e7c3-469f-be6f-364e2705a2a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DirrectionalModifier"",
                    ""type"": ""Button"",
                    ""id"": ""de8d7d90-7355-4567-9a21-ab44f048668d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bc5d36ed-5090-4e8c-b316-e471b61f80a9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""RTS"",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b88c2f4c-6753-4053-b20d-111a296a5578"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""RTS"",
                    ""action"": ""SecondaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e37cf597-d7f7-40ed-84a6-a84e7b9d3730"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnitSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab422fd3-e0dd-467e-92b5-10d35c3a9844"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c1ba21d-1806-4f93-ae32-7707d671a407"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirrectionalModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""RTS"",
            ""bindingGroup"": ""RTS"",
            ""devices"": []
        }
    ]
}");
            // RTS
            m_RTS = asset.FindActionMap("RTS", throwIfNotFound: true);
            m_RTS_MainAction = m_RTS.FindAction("MainAction", throwIfNotFound: true);
            m_RTS_SecondaryAction = m_RTS.FindAction("SecondaryAction", throwIfNotFound: true);
            m_RTS_UnitSelection = m_RTS.FindAction("UnitSelection", throwIfNotFound: true);
            m_RTS_ControlModifier = m_RTS.FindAction("ControlModifier", throwIfNotFound: true);
            m_RTS_DirrectionalModifier = m_RTS.FindAction("DirrectionalModifier", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // RTS
        private readonly InputActionMap m_RTS;
        private List<IRTSActions> m_RTSActionsCallbackInterfaces = new List<IRTSActions>();
        private readonly InputAction m_RTS_MainAction;
        private readonly InputAction m_RTS_SecondaryAction;
        private readonly InputAction m_RTS_UnitSelection;
        private readonly InputAction m_RTS_ControlModifier;
        private readonly InputAction m_RTS_DirrectionalModifier;
        public struct RTSActions
        {
            private @PlayerInput m_Wrapper;
            public RTSActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MainAction => m_Wrapper.m_RTS_MainAction;
            public InputAction @SecondaryAction => m_Wrapper.m_RTS_SecondaryAction;
            public InputAction @UnitSelection => m_Wrapper.m_RTS_UnitSelection;
            public InputAction @ControlModifier => m_Wrapper.m_RTS_ControlModifier;
            public InputAction @DirrectionalModifier => m_Wrapper.m_RTS_DirrectionalModifier;
            public InputActionMap Get() { return m_Wrapper.m_RTS; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RTSActions set) { return set.Get(); }
            public void AddCallbacks(IRTSActions instance)
            {
                if (instance == null || m_Wrapper.m_RTSActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_RTSActionsCallbackInterfaces.Add(instance);
                @MainAction.started += instance.OnMainAction;
                @MainAction.performed += instance.OnMainAction;
                @MainAction.canceled += instance.OnMainAction;
                @SecondaryAction.started += instance.OnSecondaryAction;
                @SecondaryAction.performed += instance.OnSecondaryAction;
                @SecondaryAction.canceled += instance.OnSecondaryAction;
                @UnitSelection.started += instance.OnUnitSelection;
                @UnitSelection.performed += instance.OnUnitSelection;
                @UnitSelection.canceled += instance.OnUnitSelection;
                @ControlModifier.started += instance.OnControlModifier;
                @ControlModifier.performed += instance.OnControlModifier;
                @ControlModifier.canceled += instance.OnControlModifier;
                @DirrectionalModifier.started += instance.OnDirrectionalModifier;
                @DirrectionalModifier.performed += instance.OnDirrectionalModifier;
                @DirrectionalModifier.canceled += instance.OnDirrectionalModifier;
            }

            private void UnregisterCallbacks(IRTSActions instance)
            {
                @MainAction.started -= instance.OnMainAction;
                @MainAction.performed -= instance.OnMainAction;
                @MainAction.canceled -= instance.OnMainAction;
                @SecondaryAction.started -= instance.OnSecondaryAction;
                @SecondaryAction.performed -= instance.OnSecondaryAction;
                @SecondaryAction.canceled -= instance.OnSecondaryAction;
                @UnitSelection.started -= instance.OnUnitSelection;
                @UnitSelection.performed -= instance.OnUnitSelection;
                @UnitSelection.canceled -= instance.OnUnitSelection;
                @ControlModifier.started -= instance.OnControlModifier;
                @ControlModifier.performed -= instance.OnControlModifier;
                @ControlModifier.canceled -= instance.OnControlModifier;
                @DirrectionalModifier.started -= instance.OnDirrectionalModifier;
                @DirrectionalModifier.performed -= instance.OnDirrectionalModifier;
                @DirrectionalModifier.canceled -= instance.OnDirrectionalModifier;
            }

            public void RemoveCallbacks(IRTSActions instance)
            {
                if (m_Wrapper.m_RTSActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IRTSActions instance)
            {
                foreach (var item in m_Wrapper.m_RTSActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_RTSActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public RTSActions @RTS => new RTSActions(this);
        private int m_RTSSchemeIndex = -1;
        public InputControlScheme RTSScheme
        {
            get
            {
                if (m_RTSSchemeIndex == -1) m_RTSSchemeIndex = asset.FindControlSchemeIndex("RTS");
                return asset.controlSchemes[m_RTSSchemeIndex];
            }
        }
        public interface IRTSActions
        {
            void OnMainAction(InputAction.CallbackContext context);
            void OnSecondaryAction(InputAction.CallbackContext context);
            void OnUnitSelection(InputAction.CallbackContext context);
            void OnControlModifier(InputAction.CallbackContext context);
            void OnDirrectionalModifier(InputAction.CallbackContext context);
        }
    }
}
